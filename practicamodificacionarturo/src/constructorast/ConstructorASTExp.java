
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 23 15:29:01 CEST 2021
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.*;
import ast.*;
import errors.GestionErroresExp;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 23 15:29:01 CEST 2021
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\004\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\036\014\000\002\036" +
    "\013\000\002\036\014\000\002\036\013\000\002\036\014" +
    "\000\002\036\013\000\002\037\011\000\002\037\011\000" +
    "\002\037\010\000\002\051\003\000\002\051\003\000\002" +
    "\053\005\000\002\052\007\000\002\040\005\000\002\040" +
    "\006\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\006\000\002\004\005\000\002\004\003\000\002" +
    "\021\006\000\002\021\006\000\002\050\007\000\002\050" +
    "\006\000\002\050\006\000\002\025\003\000\002\025\002" +
    "\000\002\026\005\000\002\026\003\000\002\042\012\000" +
    "\002\042\012\000\002\042\012\000\002\042\012\000\002" +
    "\042\012\000\002\003\006\000\002\032\005\000\002\032" +
    "\006\000\002\031\002\000\002\031\006\000\002\031\007" +
    "\000\002\045\011\000\002\027\005\000\002\027\003\000" +
    "\002\046\007\000\002\046\004\000\002\046\005\000\002" +
    "\034\004\000\002\034\002\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\041\011\000\002\041\011" +
    "\000\002\041\011\000\002\033\015\000\002\033\015\000" +
    "\002\033\015\000\002\033\011\000\002\033\005\000\002" +
    "\047\011\000\002\047\016\000\002\047\016\000\002\047" +
    "\017\000\002\035\012\000\002\035\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\006\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\003\000\002\017\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\006\004\000\002\006\003\000\002\022\007\000" +
    "\002\023\005\000\002\030\003\000\002\030\005\000\002" +
    "\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\070\002\uffff\003\035\004\015\005\034\014" +
    "\006\015\005\017\056\021\023\022\007\023\014\024\012" +
    "\025\060\026\047\033\055\034\065\035\026\036\052\043" +
    "\027\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\073\043\001\002\000\004\020\u016d\001" +
    "\002\000\050\003\u0166\005\u0165\010\uff8e\020\uff8e\027\uff8e" +
    "\030\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\064\uff8e\072\uff8e" +
    "\074\uff8e\001\002\000\022\003\uffdc\006\uffdc\007\uffdc\014" +
    "\uffdc\015\uffdc\030\uffdc\032\uffdc\060\uffdc\001\002\000\022" +
    "\003\uffe3\006\uffe3\007\uffe3\014\uffe3\015\uffe3\030\uffe3\032" +
    "\uffe3\060\uffe3\001\002\000\076\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\031\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\041\ufffd\043\ufffd\054\ufffd\055" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\073\ufffd\001\002\000\076\002\uffe9\003\uffe9\004\uffe9\005" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\041\uffe9\043\uffe9\054\uffe9\055\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\067\uffe9\070\uffe9\071\uffe9\073" +
    "\uffe9\001\002\000\022\003\uffe1\006\uffe1\007\uffe1\014\uffe1" +
    "\015\uffe1\030\uffe1\032\uffe1\060\uffe1\001\002\000\020\005" +
    "\034\015\237\061\033\062\062\067\054\070\032\071\022" +
    "\001\002\000\022\003\uffe2\006\uffe2\007\uffe2\014\uffe2\015" +
    "\uffe2\030\uffe2\032\uffe2\060\uffe2\001\002\000\004\005\u013a" +
    "\001\002\000\004\007\u0139\001\002\000\076\002\uffff\003" +
    "\035\004\015\005\034\013\uffff\014\006\015\005\017\056" +
    "\021\023\022\007\023\014\024\012\025\060\026\047\031" +
    "\uffff\033\055\034\065\035\026\036\052\041\uffff\043\027" +
    "\054\025\055\013\061\033\062\062\063\020\067\054\070" +
    "\032\071\022\073\043\001\002\000\026\005\034\015\237" +
    "\054\025\055\013\061\033\062\062\063\020\067\054\070" +
    "\032\071\022\001\002\000\004\002\u0136\001\002\000\060" +
    "\003\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\020" +
    "\uff89\027\uff89\030\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\064" +
    "\uff89\065\uff89\072\uff89\074\uff89\001\002\000\022\003\uffe4" +
    "\006\uffe4\007\uffe4\014\uffe4\015\uffe4\030\uffe4\032\uffe4\060" +
    "\uffe4\001\002\000\020\003\uffaa\006\uffaa\007\uffaa\011\uffaa" +
    "\012\uffaa\020\uffaa\065\uffaa\001\002\000\020\005\034\015" +
    "\237\061\033\062\062\067\054\070\032\071\022\001\002" +
    "\000\022\003\u012e\014\006\021\023\022\007\023\014\024" +
    "\012\025\060\026\047\001\002\000\006\003\u0107\005\u0106" +
    "\001\002\000\076\002\ufff7\003\ufff7\004\ufff7\005\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\031\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\041\ufff7\043\ufff7\054\ufff7\055\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\067\ufff7\070\ufff7\071\ufff7\073\ufff7\001" +
    "\002\000\076\002\ufffa\003\ufffa\004\ufffa\005\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\041\ufffa\043\ufffa\054\ufffa\055\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\067\ufffa\070\ufffa\071\ufffa\073\ufffa\001\002" +
    "\000\060\003\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012" +
    "\uff8a\020\uff8a\027\uff8a\030\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\064\uff8a\065\uff8a\072\uff8a\074\uff8a\001\002\000\060" +
    "\003\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\020" +
    "\uff88\027\uff88\030\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\064" +
    "\uff88\065\uff88\072\uff88\074\uff88\001\002\000\034\005\112" +
    "\015\117\032\107\046\114\054\025\055\013\061\033\062" +
    "\062\063\020\066\120\067\054\070\032\071\022\001\002" +
    "\000\004\015\377\001\002\000\076\002\ufff9\003\ufff9\004" +
    "\ufff9\005\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\031\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\041\ufff9\043\ufff9\054\ufff9" +
    "\055\ufff9\061\ufff9\062\ufff9\063\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\073\ufff9\001\002\000\060\003\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\020\uff8c\027\uff8c\030\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\064\uff8c\065\uff8c\072\uff8c\074" +
    "\uff8c\001\002\000\060\003\uff8f\006\uff8f\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\020\uff8f\027\uff8f\030\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\064\uff8f\065\uff8f\072\uff8f\074\uff8f\001" +
    "\002\000\060\003\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\020\uff92\027\uff92\030\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\064\uff92\065\uff92\072\uff92\074\uff92\001\002\000" +
    "\060\003\uff96\006\uff96\007\uff96\010\371\011\uff96\012\uff96" +
    "\020\uff96\027\uff96\030\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\064\372\065\uff96\072\370\074\uff96\001\002\000\004\015" +
    "\361\001\002\000\076\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\017\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\031\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\041\ufffc\043\ufffc\054\ufffc\055\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\067\ufffc\070\ufffc\071\ufffc\073\ufffc" +
    "\001\002\000\052\003\uff98\006\uff98\007\uff98\011\uff98\012" +
    "\uff98\020\uff98\027\uff98\030\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\065\uff98\074\uff98\001\002\000\052\003\uff9c\006\uff9c" +
    "\007\uff9c\011\uff9c\012\uff9c\020\uff9c\027\uff9c\030\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\351\055\347" +
    "\056\353\057\350\060\352\065\uff9c\074\uff9c\001\002\000" +
    "\006\003\342\027\343\001\002\000\040\003\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\012\uffa4\020\uffa4\027\332\030\333\047" +
    "\uffa4\050\uffa4\051\330\052\326\053\327\065\uffa4\074\331" +
    "\001\002\000\024\003\uffa6\006\uffa6\007\uffa6\011\uffa6\012" +
    "\uffa6\020\uffa6\047\uffa6\050\uffa6\065\uffa6\001\002\000\006" +
    "\003\241\005\240\001\002\000\024\003\uffa8\006\uffa8\007" +
    "\uffa8\011\uffa8\012\uffa8\020\uffa8\047\234\050\233\065\uffa8" +
    "\001\002\000\060\003\uff8b\006\uff8b\007\uff8b\010\uff8b\011" +
    "\uff8b\012\uff8b\020\uff8b\027\uff8b\030\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\064\uff8b\065\uff8b\072\uff8b\074\uff8b\001\002" +
    "\000\004\015\222\001\002\000\004\005\204\001\002\000" +
    "\076\002\ufff8\003\ufff8\004\ufff8\005\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\041\ufff8\043\ufff8\054\ufff8\055\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\073\ufff8\001\002\000\022" +
    "\003\uffe0\006\uffe0\007\uffe0\014\uffe0\015\uffe0\030\uffe0\032" +
    "\uffe0\060\uffe0\001\002\000\006\015\142\060\103\001\002" +
    "\000\060\003\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\020\uff87\027\uff87\030\uff87\047\uff87\050\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\064\uff87\065\uff87\072\uff87\074\uff87\001\002\000\076" +
    "\002\ufff4\003\ufff4\004\ufff4\005\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\041" +
    "\ufff4\043\ufff4\054\ufff4\055\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\073\ufff4\001\002\000\076\002" +
    "\ufff6\003\ufff6\004\ufff6\005\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\041\ufff6" +
    "\043\ufff6\054\ufff6\055\ufff6\061\ufff6\062\ufff6\063\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\073\ufff6\001\002\000\010\003\072" +
    "\014\071\015\073\001\002\000\076\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\031\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\041\ufffe\043\ufffe\054\ufffe" +
    "\055\ufffe\061\ufffe\062\ufffe\063\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\073\ufffe\001\002\000\076\002\uffea\003\uffea\004\uffea" +
    "\005\uffea\013\uffea\014\uffea\015\uffea\017\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\031\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\041\uffea\043\uffea\054\uffea\055" +
    "\uffea\061\uffea\062\uffea\063\uffea\067\uffea\070\uffea\071\uffea" +
    "\073\uffea\001\002\000\076\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\031\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\041\ufff5\043\ufff5\054\ufff5\055\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\067\ufff5\070\ufff5\071\ufff5\073" +
    "\ufff5\001\002\000\004\012\075\001\002\000\076\002\uffc3" +
    "\003\uffc3\004\uffc3\005\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\043" +
    "\uffc3\054\uffc3\055\uffc3\061\uffc3\062\uffc3\063\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\073\uffc3\001\002\000\004\003\074\001" +
    "\002\000\076\002\uffc2\003\uffc2\004\uffc2\005\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\041\uffc2\043\uffc2\054\uffc2\055\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\067\uffc2\070\uffc2\071\uffc2\073\uffc2\001\002" +
    "\000\022\013\uffc0\014\006\021\023\022\007\023\014\024" +
    "\012\025\060\026\047\001\002\000\006\015\104\060\103" +
    "\001\002\000\004\013\102\001\002\000\022\013\uffc0\014" +
    "\006\021\023\022\007\023\014\024\012\025\060\026\047" +
    "\001\002\000\004\013\uffc1\001\002\000\076\002\uffc4\003" +
    "\uffc4\004\uffc4\005\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\031" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\043\uffc4" +
    "\054\uffc4\055\uffc4\061\uffc4\062\uffc4\063\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\073\uffc4\001\002\000\022\003\uffdf\006\uffdf" +
    "\007\uffdf\014\uffdf\015\uffdf\030\uffdf\032\uffdf\060\uffdf\001" +
    "\002\000\006\007\105\020\106\001\002\000\076\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\013\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\041\uffe8\043" +
    "\uffe8\054\uffe8\055\uffe8\061\uffe8\062\uffe8\063\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\073\uffe8\001\002\000\034\005\112\015" +
    "\117\032\107\046\114\054\025\055\013\061\033\062\062" +
    "\063\020\066\120\067\054\070\032\071\022\001\002\000" +
    "\026\005\034\015\117\054\025\055\013\061\033\062\062" +
    "\063\020\067\054\070\032\071\022\001\002\000\006\006" +
    "\uffab\007\uffab\001\002\000\004\007\140\001\002\000\034" +
    "\005\112\015\117\032\107\046\114\054\025\055\013\061" +
    "\033\062\062\063\020\066\120\067\054\070\032\071\022" +
    "\001\002\000\006\006\uffae\007\uffae\001\002\000\020\014" +
    "\006\021\023\022\007\023\014\024\012\025\060\026\047" +
    "\001\002\000\006\006\uffac\007\uffac\001\002\000\006\006" +
    "\uffad\007\uffad\001\002\000\062\003\uff8e\005\121\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\020\uff8e\027\uff8e\030" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\060\uff8e\064\uff8e\065\uff8e\072" +
    "\uff8e\074\uff8e\001\002\000\006\006\uff85\007\uff85\001\002" +
    "\000\032\003\uffd5\005\034\006\uffd5\015\117\054\025\055" +
    "\013\061\033\062\062\063\020\067\054\070\032\071\022" +
    "\001\002\000\006\003\uffd6\006\uffd6\001\002\000\006\003" +
    "\130\006\127\001\002\000\010\003\uffd3\006\uffd3\011\125" +
    "\001\002\000\026\005\034\015\117\054\025\055\013\061" +
    "\033\062\062\063\020\067\054\070\032\071\022\001\002" +
    "\000\006\003\uffd4\006\uffd4\001\002\000\020\003\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\012\uffdb\020\uffdb\065\uffdb\001\002" +
    "\000\020\003\uffda\006\uffda\007\uffda\011\uffda\012\uffda\020" +
    "\uffda\065\uffda\001\002\000\010\006\uff86\007\uff86\060\103" +
    "\001\002\000\004\006\137\001\002\000\006\006\uffae\011" +
    "\134\001\002\000\026\005\034\015\117\054\025\055\013" +
    "\061\033\062\062\063\020\067\054\070\032\071\022\001" +
    "\002\000\004\006\136\001\002\000\006\006\uff84\007\uff84" +
    "\001\002\000\060\003\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\020\uff8d\027\uff8d\030\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\064\uff8d\065\uff8d\072\uff8d\074\uff8d\001\002" +
    "\000\076\002\uffe7\003\uffe7\004\uffe7\005\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\041\uffe7\043\uffe7\054\uffe7\055\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\067\uffe7\070\uffe7\071\uffe7\073\uffe7\001\002\000" +
    "\006\006\uff80\007\uff80\001\002\000\012\003\144\005\143" +
    "\007\105\020\106\001\002\000\020\014\006\021\023\022" +
    "\007\023\014\024\012\025\060\026\047\001\002\000\020" +
    "\014\006\021\023\022\007\023\014\024\012\025\060\026" +
    "\047\001\002\000\010\015\160\032\157\060\103\001\002" +
    "\000\004\006\147\001\002\000\004\012\150\001\002\000" +
    "\070\003\035\004\015\005\034\014\006\015\005\017\056" +
    "\021\023\022\007\023\014\024\012\025\060\026\047\031" +
    "\uffff\033\055\034\065\035\026\036\052\043\027\054\025" +
    "\055\013\061\033\062\062\063\020\067\054\070\032\071" +
    "\022\073\043\001\002\000\004\013\156\001\002\000\004" +
    "\031\153\001\002\000\026\005\034\015\117\054\025\055" +
    "\013\061\033\062\062\063\020\067\054\070\032\071\022" +
    "\001\002\000\004\007\155\001\002\000\004\013\uffcd\001" +
    "\002\000\076\002\uffd0\003\uffd0\004\uffd0\005\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\041\uffd0\043\uffd0\054\uffd0\055\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\001\002" +
    "\000\004\015\171\001\002\000\010\003\uffca\006\uffca\011" +
    "\162\001\002\000\006\003\uffcc\006\uffcc\001\002\000\020" +
    "\014\006\021\023\022\007\023\014\024\012\025\060\026" +
    "\047\001\002\000\010\015\165\032\164\060\103\001\002" +
    "\000\004\015\167\001\002\000\010\003\uffca\006\uffca\011" +
    "\162\001\002\000\006\003\uffc9\006\uffc9\001\002\000\010" +
    "\003\uffca\006\uffca\011\162\001\002\000\006\003\uffc8\006" +
    "\uffc8\001\002\000\010\003\uffca\006\uffca\011\162\001\002" +
    "\000\006\003\uffcb\006\uffcb\001\002\000\006\003\175\006" +
    "\174\001\002\000\004\012\201\001\002\000\004\012\176" +
    "\001\002\000\070\003\035\004\015\005\034\014\006\015" +
    "\005\017\056\021\023\022\007\023\014\024\012\025\060" +
    "\026\047\031\uffff\033\055\034\065\035\026\036\052\043" +
    "\027\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\073\043\001\002\000\004\013\200\001" +
    "\002\000\076\002\uffcf\003\uffcf\004\uffcf\005\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\041\uffcf\043\uffcf\054\uffcf\055\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\067\uffcf\070\uffcf\071\uffcf\073\uffcf\001\002" +
    "\000\070\003\035\004\015\005\034\014\006\015\005\017" +
    "\056\021\023\022\007\023\014\024\012\025\060\026\047" +
    "\031\uffff\033\055\034\065\035\026\036\052\043\027\054" +
    "\025\055\013\061\033\062\062\063\020\067\054\070\032" +
    "\071\022\073\043\001\002\000\004\013\203\001\002\000" +
    "\076\002\uffd2\003\uffd2\004\uffd2\005\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\041\uffd2\043\uffd2\054\uffd2\055\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\073\uffd2\001\002\000\030" +
    "\003\205\005\034\015\117\054\025\055\013\061\033\062" +
    "\062\063\020\067\054\070\032\071\022\001\002\000\004" +
    "\006\216\001\002\000\006\006\207\012\210\001\002\000" +
    "\004\012\213\001\002\000\070\003\035\004\015\005\034" +
    "\013\uffff\014\006\015\005\017\056\021\023\022\007\023" +
    "\014\024\012\025\060\026\047\033\055\034\065\035\026" +
    "\036\052\043\027\054\025\055\013\061\033\062\062\063" +
    "\020\067\054\070\032\071\022\073\043\001\002\000\004" +
    "\013\212\001\002\000\076\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\041\uffeb\043\uffeb\054\uffeb\055\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\067\uffeb\070\uffeb\071\uffeb\073" +
    "\uffeb\001\002\000\070\003\035\004\015\005\034\013\uffff" +
    "\014\006\015\005\017\056\021\023\022\007\023\014\024" +
    "\012\025\060\026\047\033\055\034\065\035\026\036\052" +
    "\043\027\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\073\043\001\002\000\004\013\215" +
    "\001\002\000\076\002\uffed\003\uffed\004\uffed\005\uffed\013" +
    "\uffed\014\uffed\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\031\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\041\uffed\043\uffed\054\uffed\055\uffed\061\uffed" +
    "\062\uffed\063\uffed\067\uffed\070\uffed\071\uffed\073\uffed\001" +
    "\002\000\004\012\217\001\002\000\070\003\035\004\015" +
    "\005\034\013\uffff\014\006\015\005\017\056\021\023\022" +
    "\007\023\014\024\012\025\060\026\047\033\055\034\065" +
    "\035\026\036\052\043\027\054\025\055\013\061\033\062" +
    "\062\063\020\067\054\070\032\071\022\073\043\001\002" +
    "\000\004\013\221\001\002\000\076\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\013\uffec\014\uffec\015\uffec\017\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\031\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\041\uffec\043\uffec\054\uffec" +
    "\055\uffec\061\uffec\062\uffec\063\uffec\067\uffec\070\uffec\071" +
    "\uffec\073\uffec\001\002\000\004\020\223\001\002\000\004" +
    "\012\224\001\002\000\004\015\226\001\002\000\004\013" +
    "\231\001\002\000\006\011\227\013\uffc5\001\002\000\004" +
    "\015\226\001\002\000\004\013\uffc6\001\002\000\004\007" +
    "\232\001\002\000\076\002\uffc7\003\uffc7\004\uffc7\005\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\017\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\031\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\041\uffc7\043\uffc7\054\uffc7\055\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\067\uffc7\070\uffc7\071\uffc7\073\uffc7" +
    "\001\002\000\026\005\034\015\237\054\025\055\013\061" +
    "\033\062\062\063\020\067\054\070\032\071\022\001\002" +
    "\000\026\005\034\015\117\054\025\055\013\061\033\062" +
    "\062\063\020\067\054\070\032\071\022\001\002\000\020" +
    "\003\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9\020\uffa9\065" +
    "\uffa9\001\002\000\024\003\uffa7\006\uffa7\007\uffa7\011\uffa7" +
    "\012\uffa7\020\uffa7\047\uffa7\050\uffa7\065\uffa7\001\002\000" +
    "\060\003\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\020\uff8e\027\uff8e\030\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\064\uff8e\065\uff8e\072\uff8e\074\uff8e\001\002\000\026\005" +
    "\034\015\117\054\025\055\013\061\033\062\062\063\020" +
    "\067\054\070\032\071\022\001\002\000\026\005\034\015" +
    "\117\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\001\002\000\004\006\243\001\002\000" +
    "\004\012\244\001\002\000\006\037\247\042\245\001\002" +
    "\000\006\003\305\040\306\001\002\000\004\013\304\001" +
    "\002\000\006\003\251\005\250\001\002\000\026\005\034" +
    "\015\117\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\001\002\000\026\005\034\015\117" +
    "\054\025\055\013\061\033\062\062\063\020\067\054\070" +
    "\032\071\022\001\002\000\004\006\253\001\002\000\004" +
    "\040\254\001\002\000\004\012\255\001\002\000\070\003" +
    "\035\004\015\005\034\014\006\015\005\017\056\021\023" +
    "\022\007\023\014\024\012\025\060\026\047\033\055\034" +
    "\065\035\026\036\052\041\uffff\043\027\054\025\055\013" +
    "\061\033\062\062\063\020\067\054\070\032\071\022\073" +
    "\043\001\002\000\004\041\257\001\002\000\004\007\260" +
    "\001\002\000\004\013\261\001\002\000\006\037\247\042" +
    "\245\001\002\000\004\013\uffb8\001\002\000\006\003\264" +
    "\006\265\001\002\000\004\040\275\001\002\000\004\040" +
    "\266\001\002\000\004\012\267\001\002\000\070\003\035" +
    "\004\015\005\034\014\006\015\005\017\056\021\023\022" +
    "\007\023\014\024\012\025\060\026\047\033\055\034\065" +
    "\035\026\036\052\041\uffff\043\027\054\025\055\013\061" +
    "\033\062\062\063\020\067\054\070\032\071\022\073\043" +
    "\001\002\000\004\041\271\001\002\000\004\007\272\001" +
    "\002\000\004\013\273\001\002\000\006\037\247\042\245" +
    "\001\002\000\004\013\uffb9\001\002\000\004\012\276\001" +
    "\002\000\070\003\035\004\015\005\034\014\006\015\005" +
    "\017\056\021\023\022\007\023\014\024\012\025\060\026" +
    "\047\033\055\034\065\035\026\036\052\041\uffff\043\027" +
    "\054\025\055\013\061\033\062\062\063\020\067\054\070" +
    "\032\071\022\073\043\001\002\000\004\041\300\001\002" +
    "\000\004\007\301\001\002\000\004\013\302\001\002\000" +
    "\006\037\247\042\245\001\002\000\004\013\uffb7\001\002" +
    "\000\076\002\uffbb\003\uffbb\004\uffbb\005\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\041\uffbb\043\uffbb\054\uffbb\055\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\067\uffbb\070\uffbb\071\uffbb\073\uffbb\001\002\000" +
    "\004\007\314\001\002\000\004\012\307\001\002\000\070" +
    "\003\035\004\015\005\034\014\006\015\005\017\056\021" +
    "\023\022\007\023\014\024\012\025\060\026\047\033\055" +
    "\034\065\035\026\036\052\041\uffff\043\027\054\025\055" +
    "\013\061\033\062\062\063\020\067\054\070\032\071\022" +
    "\073\043\001\002\000\004\041\311\001\002\000\004\007" +
    "\312\001\002\000\004\013\313\001\002\000\004\013\uffb6" +
    "\001\002\000\004\013\uffb5\001\002\000\006\003\316\006" +
    "\317\001\002\000\004\012\323\001\002\000\004\012\320" +
    "\001\002\000\006\037\247\042\245\001\002\000\004\013" +
    "\322\001\002\000\076\002\uffbc\003\uffbc\004\uffbc\005\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\041\uffbc\043\uffbc\054\uffbc\055\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\067\uffbc\070\uffbc\071\uffbc\073\uffbc" +
    "\001\002\000\006\037\247\042\245\001\002\000\004\013" +
    "\325\001\002\000\076\002\uffba\003\uffba\004\uffba\005\uffba" +
    "\013\uffba\014\uffba\015\uffba\017\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\031\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\041\uffba\043\uffba\054\uffba\055\uffba\061" +
    "\uffba\062\uffba\063\uffba\067\uffba\070\uffba\071\uffba\073\uffba" +
    "\001\002\000\026\005\034\015\237\054\025\055\013\061" +
    "\033\062\062\063\020\067\054\070\032\071\022\001\002" +
    "\000\026\005\034\015\237\054\025\055\013\061\033\062" +
    "\062\063\020\067\054\070\032\071\022\001\002\000\026" +
    "\005\034\015\237\054\025\055\013\061\033\062\062\063" +
    "\020\067\054\070\032\071\022\001\002\000\026\005\034" +
    "\015\237\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\001\002\000\026\005\034\015\237" +
    "\054\025\055\013\061\033\062\062\063\020\067\054\070" +
    "\032\071\022\001\002\000\026\005\034\015\237\054\025" +
    "\055\013\061\033\062\062\063\020\067\054\070\032\071" +
    "\022\001\002\000\024\003\uffa3\006\uffa3\007\uffa3\011\uffa3" +
    "\012\uffa3\020\uffa3\047\uffa3\050\uffa3\065\uffa3\001\002\000" +
    "\024\003\uffa2\006\uffa2\007\uffa2\011\uffa2\012\uffa2\020\uffa2" +
    "\047\uffa2\050\uffa2\065\uffa2\001\002\000\024\003\uffa0\006" +
    "\uffa0\007\uffa0\011\uffa0\012\uffa0\020\uffa0\047\uffa0\050\uffa0" +
    "\065\uffa0\001\002\000\024\003\uffa5\006\uffa5\007\uffa5\011" +
    "\uffa5\012\uffa5\020\uffa5\047\uffa5\050\uffa5\065\uffa5\001\002" +
    "\000\024\003\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f\020" +
    "\uff9f\047\uff9f\050\uff9f\065\uff9f\001\002\000\024\003\uffa1" +
    "\006\uffa1\007\uffa1\011\uffa1\012\uffa1\020\uffa1\047\uffa1\050" +
    "\uffa1\065\uffa1\001\002\000\004\030\346\001\002\000\020" +
    "\014\006\021\023\022\007\023\014\024\012\025\060\026" +
    "\047\001\002\000\006\030\345\060\103\001\002\000\022" +
    "\003\uffde\006\uffde\007\uffde\014\uffde\015\uffde\030\uffde\032" +
    "\uffde\060\uffde\001\002\000\022\003\uffdd\006\uffdd\007\uffdd" +
    "\014\uffdd\015\uffdd\030\uffdd\032\uffdd\060\uffdd\001\002\000" +
    "\026\005\034\015\237\054\025\055\013\061\033\062\062" +
    "\063\020\067\054\070\032\071\022\001\002\000\026\005" +
    "\034\015\237\054\025\055\013\061\033\062\062\063\020" +
    "\067\054\070\032\071\022\001\002\000\026\005\034\015" +
    "\237\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\001\002\000\026\005\034\015\237\054" +
    "\025\055\013\061\033\062\062\063\020\067\054\070\032" +
    "\071\022\001\002\000\026\005\034\015\237\054\025\055" +
    "\013\061\033\062\062\063\020\067\054\070\032\071\022" +
    "\001\002\000\052\003\uff9b\006\uff9b\007\uff9b\011\uff9b\012" +
    "\uff9b\020\uff9b\027\uff9b\030\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\065\uff9b\074\uff9b\001\002\000\052\003\uff99\006\uff99" +
    "\007\uff99\011\uff99\012\uff99\020\uff99\027\uff99\030\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99" +
    "\056\uff99\057\uff99\060\uff99\065\uff99\074\uff99\001\002\000" +
    "\040\003\uff9e\006\uff9e\007\uff9e\011\uff9e\012\uff9e\020\uff9e" +
    "\027\uff9e\030\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\065\uff9e\074\uff9e\001\002\000\052\003\uff9a\006\uff9a" +
    "\007\uff9a\011\uff9a\012\uff9a\020\uff9a\027\uff9a\030\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\065\uff9a\074\uff9a\001\002\000" +
    "\040\003\uff9d\006\uff9d\007\uff9d\011\uff9d\012\uff9d\020\uff9d" +
    "\027\uff9d\030\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\065\uff9d\074\uff9d\001\002\000\004\005\362\001\002" +
    "\000\020\014\006\021\023\022\007\023\014\024\012\025" +
    "\060\026\047\001\002\000\004\006\364\001\002\000\004" +
    "\012\365\001\002\000\070\003\035\004\015\005\034\013" +
    "\uffff\014\006\015\005\017\056\021\023\022\007\023\014" +
    "\024\012\025\060\026\047\033\055\034\065\035\026\036" +
    "\052\043\027\054\025\055\013\061\033\062\062\063\020" +
    "\067\054\070\032\071\022\073\043\001\002\000\004\013" +
    "\367\001\002\000\076\002\uffce\003\uffce\004\uffce\005\uffce" +
    "\013\uffce\014\uffce\015\uffce\017\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\041\uffce\043\uffce\054\uffce\055\uffce\061" +
    "\uffce\062\uffce\063\uffce\067\uffce\070\uffce\071\uffce\073\uffce" +
    "\001\002\000\004\015\376\001\002\000\004\015\375\001" +
    "\002\000\026\005\034\015\117\054\025\055\013\061\033" +
    "\062\062\063\020\067\054\070\032\071\022\001\002\000" +
    "\004\065\374\001\002\000\060\003\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\020\uff95\027\uff95\030\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\060\uff95\064\uff95\065\uff95\072\uff95\074" +
    "\uff95\001\002\000\060\003\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\020\uff94\027\uff94\030\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\064\uff94\065\uff94\072\uff94\074\uff94\001" +
    "\002\000\060\003\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\020\uff93\027\uff93\030\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\060\uff93\064\uff93\065\uff93\072\uff93\074\uff93\001\002\000" +
    "\004\005\u0100\001\002\000\020\014\006\021\023\022\007" +
    "\023\014\024\012\025\060\026\047\001\002\000\004\006" +
    "\u0102\001\002\000\004\012\u0103\001\002\000\070\003\035" +
    "\004\015\005\034\014\006\015\005\017\056\021\023\022" +
    "\007\023\014\024\012\025\060\026\047\031\uffff\033\055" +
    "\034\065\035\026\036\052\043\027\054\025\055\013\061" +
    "\033\062\062\063\020\067\054\070\032\071\022\073\043" +
    "\001\002\000\004\013\u0105\001\002\000\076\002\uffd1\003" +
    "\uffd1\004\uffd1\005\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\031" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\043\uffd1" +
    "\054\uffd1\055\uffd1\061\uffd1\062\uffd1\063\uffd1\067\uffd1\070" +
    "\uffd1\071\uffd1\073\uffd1\001\002\000\026\005\034\015\117" +
    "\054\025\055\013\061\033\062\062\063\020\067\054\070" +
    "\032\071\022\001\002\000\026\005\034\015\117\054\025" +
    "\055\013\061\033\062\062\063\020\067\054\070\032\071" +
    "\022\001\002\000\004\006\u0109\001\002\000\004\012\u010a" +
    "\001\002\000\070\003\035\004\015\005\034\013\uffff\014" +
    "\006\015\005\017\056\021\023\022\007\023\014\024\012" +
    "\025\060\026\047\033\055\034\065\035\026\036\052\043" +
    "\027\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\073\043\001\002\000\004\013\u010c\001" +
    "\002\000\006\044\u010e\045\uffaf\001\002\000\004\045\u0116" +
    "\001\002\000\004\005\u010f\001\002\000\026\005\034\015" +
    "\117\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\001\002\000\004\006\u0111\001\002\000" +
    "\004\012\u0112\001\002\000\070\003\035\004\015\005\034" +
    "\013\uffff\014\006\015\005\017\056\021\023\022\007\023" +
    "\014\024\012\025\060\026\047\033\055\034\065\035\026" +
    "\036\052\043\027\054\025\055\013\061\033\062\062\063" +
    "\020\067\054\070\032\071\022\073\043\001\002\000\004" +
    "\013\u0114\001\002\000\006\044\u010e\045\uffaf\001\002\000" +
    "\004\045\uffb0\001\002\000\004\012\u0117\001\002\000\070" +
    "\003\035\004\015\005\034\013\uffff\014\006\015\005\017" +
    "\056\021\023\022\007\023\014\024\012\025\060\026\047" +
    "\033\055\034\065\035\026\036\052\043\027\054\025\055" +
    "\013\061\033\062\062\063\020\067\054\070\032\071\022" +
    "\073\043\001\002\000\004\013\u0119\001\002\000\076\002" +
    "\uffb2\003\uffb2\004\uffb2\005\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\041\uffb2" +
    "\043\uffb2\054\uffb2\055\uffb2\061\uffb2\062\uffb2\063\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\073\uffb2\001\002\000\004\006\u011b" +
    "\001\002\000\006\003\u011c\012\u011d\001\002\000\004\012" +
    "\u0125\001\002\000\070\003\035\004\015\005\034\013\uffff" +
    "\014\006\015\005\017\056\021\023\022\007\023\014\024" +
    "\012\025\060\026\047\033\055\034\065\035\026\036\052" +
    "\043\027\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\073\043\001\002\000\004\013\u011f" +
    "\001\002\000\102\002\uffb4\003\uffb4\004\uffb4\005\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\031\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\041\uffb4\043\uffb4\044\u010e\045\uffaf\054\uffb4" +
    "\055\uffb4\061\uffb4\062\uffb4\063\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\073\uffb4\001\002\000\004\045\u0121\001\002\000\004" +
    "\012\u0122\001\002\000\070\003\035\004\015\005\034\013" +
    "\uffff\014\006\015\005\017\056\021\023\022\007\023\014" +
    "\024\012\025\060\026\047\033\055\034\065\035\026\036" +
    "\052\043\027\054\025\055\013\061\033\062\062\063\020" +
    "\067\054\070\032\071\022\073\043\001\002\000\004\013" +
    "\u0124\001\002\000\076\002\uffb3\003\uffb3\004\uffb3\005\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\041\uffb3\043\uffb3\054\uffb3\055\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\067\uffb3\070\uffb3\071\uffb3\073\uffb3" +
    "\001\002\000\070\003\035\004\015\005\034\013\uffff\014" +
    "\006\015\005\017\056\021\023\022\007\023\014\024\012" +
    "\025\060\026\047\033\055\034\065\035\026\036\052\043" +
    "\027\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\073\043\001\002\000\004\013\u0127\001" +
    "\002\000\006\044\u010e\045\uffaf\001\002\000\004\045\u0129" +
    "\001\002\000\004\012\u012a\001\002\000\070\003\035\004" +
    "\015\005\034\013\uffff\014\006\015\005\017\056\021\023" +
    "\022\007\023\014\024\012\025\060\026\047\033\055\034" +
    "\065\035\026\036\052\043\027\054\025\055\013\061\033" +
    "\062\062\063\020\067\054\070\032\071\022\073\043\001" +
    "\002\000\004\013\u012c\001\002\000\076\002\uffb1\003\uffb1" +
    "\004\uffb1\005\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\041\uffb1\043\uffb1\054" +
    "\uffb1\055\uffb1\061\uffb1\062\uffb1\063\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\073\uffb1\001\002\000\010\003\u0132\014\u0131\060" +
    "\103\001\002\000\004\014\u012f\001\002\000\004\007\u0130" +
    "\001\002\000\076\002\uffbe\003\uffbe\004\uffbe\005\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\041\uffbe\043\uffbe\054\uffbe\055\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\067\uffbe\070\uffbe\071\uffbe\073\uffbe\001" +
    "\002\000\004\007\u0134\001\002\000\004\007\u0133\001\002" +
    "\000\076\002\uffbd\003\uffbd\004\uffbd\005\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\041\uffbd\043\uffbd\054\uffbd\055\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\067\uffbd\070\uffbd\071\uffbd\073\uffbd\001\002\000" +
    "\076\002\uffbf\003\uffbf\004\uffbf\005\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\041\uffbf\043\uffbf\054\uffbf\055\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\073\uffbf\001\002\000\060" +
    "\003\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\020" +
    "\uff91\027\uff91\030\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\064" +
    "\uff91\065\uff91\072\uff91\074\uff91\001\002\000\004\002\000" +
    "\001\002\000\052\003\uff97\006\uff97\007\uff97\011\uff97\012" +
    "\uff97\020\uff97\027\uff97\030\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\065\uff97\074\uff97\001\002\000\012\002\001\013\001" +
    "\031\001\041\001\001\002\000\076\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\031\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\041\ufffb\043\ufffb\054\ufffb" +
    "\055\ufffb\061\ufffb\062\ufffb\063\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\073\ufffb\001\002\000\024\003\u013d\014\006\015\u013e" +
    "\021\023\022\007\023\014\024\012\025\060\026\047\001" +
    "\002\000\006\015\u0163\060\103\001\002\000\030\003\u0151" +
    "\005\034\015\117\054\025\055\013\061\033\062\062\063" +
    "\020\067\054\070\032\071\022\001\002\000\026\005\034" +
    "\015\117\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\001\002\000\004\016\u013f\001\002" +
    "\000\006\003\u0140\015\u0141\001\002\000\004\006\u0146\001" +
    "\002\000\004\006\u0142\001\002\000\004\012\u0143\001\002" +
    "\000\070\003\035\004\015\005\034\013\uffff\014\006\015" +
    "\005\017\056\021\023\022\007\023\014\024\012\025\060" +
    "\026\047\033\055\034\065\035\026\036\052\043\027\054" +
    "\025\055\013\061\033\062\062\063\020\067\054\070\032" +
    "\071\022\073\043\001\002\000\004\013\u0145\001\002\000" +
    "\076\002\ufff2\003\ufff2\004\ufff2\005\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\041\ufff2\043\ufff2\054\ufff2\055\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\073\ufff2\001\002\000\004" +
    "\012\u0147\001\002\000\070\003\035\004\015\005\034\013" +
    "\uffff\014\006\015\005\017\056\021\023\022\007\023\014" +
    "\024\012\025\060\026\047\033\055\034\065\035\026\036" +
    "\052\043\027\054\025\055\013\061\033\062\062\063\020" +
    "\067\054\070\032\071\022\073\043\001\002\000\004\013" +
    "\u0149\001\002\000\076\002\uffee\003\uffee\004\uffee\005\uffee" +
    "\013\uffee\014\uffee\015\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\031\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\041\uffee\043\uffee\054\uffee\055\uffee\061" +
    "\uffee\062\uffee\063\uffee\067\uffee\070\uffee\071\uffee\073\uffee" +
    "\001\002\000\004\007\u014b\001\002\000\026\005\034\015" +
    "\117\054\025\055\013\061\033\062\062\063\020\067\054" +
    "\070\032\071\022\001\002\000\004\006\u014d\001\002\000" +
    "\004\012\u014e\001\002\000\070\003\035\004\015\005\034" +
    "\013\uffff\014\006\015\005\017\056\021\023\022\007\023" +
    "\014\024\012\025\060\026\047\033\055\034\065\035\026" +
    "\036\052\043\027\054\025\055\013\061\033\062\062\063" +
    "\020\067\054\070\032\071\022\073\043\001\002\000\004" +
    "\013\u0150\001\002\000\076\002\ufff1\003\ufff1\004\ufff1\005" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\041\ufff1\043\ufff1\054\ufff1\055\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\067\ufff1\070\ufff1\071\ufff1\073" +
    "\ufff1\001\002\000\026\005\034\015\117\054\025\055\013" +
    "\061\033\062\062\063\020\067\054\070\032\071\022\001" +
    "\002\000\004\007\u0153\001\002\000\030\003\u0154\005\034" +
    "\015\117\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\001\002\000\004\006\u015a\001\002" +
    "\000\004\006\u0156\001\002\000\004\012\u0157\001\002\000" +
    "\070\003\035\004\015\005\034\013\uffff\014\006\015\005" +
    "\017\056\021\023\022\007\023\014\024\012\025\060\026" +
    "\047\033\055\034\065\035\026\036\052\043\027\054\025" +
    "\055\013\061\033\062\062\063\020\067\054\070\032\071" +
    "\022\073\043\001\002\000\004\013\u0159\001\002\000\076" +
    "\002\ufff3\003\ufff3\004\ufff3\005\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041" +
    "\ufff3\043\ufff3\054\ufff3\055\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\073\ufff3\001\002\000\004\012" +
    "\u015b\001\002\000\070\003\035\004\015\005\034\013\uffff" +
    "\014\006\015\005\017\056\021\023\022\007\023\014\024" +
    "\012\025\060\026\047\033\055\034\065\035\026\036\052" +
    "\043\027\054\025\055\013\061\033\062\062\063\020\067" +
    "\054\070\032\071\022\073\043\001\002\000\004\013\u015d" +
    "\001\002\000\076\002\uffef\003\uffef\004\uffef\005\uffef\013" +
    "\uffef\014\uffef\015\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\031\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\041\uffef\043\uffef\054\uffef\055\uffef\061\uffef" +
    "\062\uffef\063\uffef\067\uffef\070\uffef\071\uffef\073\uffef\001" +
    "\002\000\004\006\u015f\001\002\000\004\012\u0160\001\002" +
    "\000\070\003\035\004\015\005\034\013\uffff\014\006\015" +
    "\005\017\056\021\023\022\007\023\014\024\012\025\060" +
    "\026\047\033\055\034\065\035\026\036\052\043\027\054" +
    "\025\055\013\061\033\062\062\063\020\067\054\070\032" +
    "\071\022\073\043\001\002\000\004\013\u0162\001\002\000" +
    "\076\002\ufff0\003\ufff0\004\ufff0\005\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\041\ufff0\043\ufff0\054\ufff0\055\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\067\ufff0\070\ufff0\071\ufff0\073\ufff0\001\002\000\004" +
    "\020\106\001\002\000\060\003\uff90\006\uff90\007\uff90\010" +
    "\uff90\011\uff90\012\uff90\020\uff90\027\uff90\030\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\064\uff90\065\uff90\072\uff90\074\uff90" +
    "\001\002\000\032\003\uffd5\005\034\006\uffd5\015\117\054" +
    "\025\055\013\061\033\062\062\063\020\067\054\070\032" +
    "\071\022\001\002\000\030\005\034\006\uffd5\015\117\054" +
    "\025\055\013\061\033\062\062\063\020\067\054\070\032" +
    "\071\022\001\002\000\004\006\u0168\001\002\000\076\002" +
    "\uffd8\003\uffd8\004\uffd8\005\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\041\uffd8" +
    "\043\uffd8\054\uffd8\055\uffd8\061\uffd8\062\uffd8\063\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\073\uffd8\001\002\000\006\003\u016a" +
    "\006\u016b\001\002\000\100\002\uffd7\003\uffd7\004\uffd7\005" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffda\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\041\uffd7\043\uffd7\054\uffd7" +
    "\055\uffd7\061\uffd7\062\uffd7\063\uffd7\067\uffd7\070\uffd7\071" +
    "\uffd7\073\uffd7\001\002\000\006\007\u016c\020\uffdb\001\002" +
    "\000\076\002\uffd9\003\uffd9\004\uffd9\005\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\041\uffd9\043\uffd9\054\uffd9\055\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\067\uffd9\070\uffd9\071\uffd9\073\uffd9\001\002\000" +
    "\036\003\u016f\005\112\015\117\032\107\046\114\054\025" +
    "\055\013\061\033\062\062\063\020\066\120\067\054\070" +
    "\032\071\022\001\002\000\006\006\uffe6\007\uffe6\001\002" +
    "\000\004\007\u0170\001\002\000\006\006\uffe5\007\uffe5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\070\002\020\004\060\007\003\010\052\011" +
    "\050\012\047\013\045\014\044\015\041\016\040\017\037" +
    "\020\036\021\023\036\065\037\007\040\015\041\030\042" +
    "\035\043\056\044\016\045\027\046\063\047\062\050\067" +
    "\051\043\052\066\053\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u0163\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\002\u0137\004\060\007\003\010" +
    "\052\011\050\012\047\013\045\014\044\015\041\016\040" +
    "\017\037\020\036\021\023\036\065\037\007\040\015\041" +
    "\030\042\035\043\056\044\016\045\027\046\063\047\062" +
    "\050\067\051\043\052\066\053\010\001\001\000\014\014" +
    "\u0136\015\041\016\040\017\037\020\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u0134\020\036\001\001\000\004\004\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\131" +
    "\006\115\007\112\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\022\114" +
    "\024\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\075\034\076\051\077\052\066\053" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\075\034\100\051\077\052\066\053\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\110\006\115\007" +
    "\112\010\052\011\050\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\021\023\022\114\024\107\001" +
    "\001\000\030\007\140\010\052\011\050\012\047\013\045" +
    "\014\044\015\041\016\040\017\037\020\036\021\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\131" +
    "\006\115\007\132\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\022\114" +
    "\024\107\001\001\000\002\001\001\000\004\004\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\007\123\010\052\011\050\012" +
    "\047\013\045\014\044\015\041\016\040\017\037\020\036" +
    "\021\023\025\122\026\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\123\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\026\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\134\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\144\032\172\001\001" +
    "\000\006\004\144\032\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\002\151\003\150" +
    "\004\060\007\003\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\036\065" +
    "\037\007\040\015\041\030\042\035\043\056\044\016\045" +
    "\027\046\063\047\062\050\067\051\043\052\066\053\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\153\010\052\011\050\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\021\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\160\001\001\000\002\001\001\000\004\004" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\165\001\001\000\002\001\001\000\004\031\167\001" +
    "\001\000\002\001\001\000\004\031\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\002\151\003\176\004\060\007\003\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\036\065\037\007\040\015\041\030" +
    "\042\035\043\056\044\016\045\027\046\063\047\062\050" +
    "\067\051\043\052\066\053\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\002\151\003\201\004\060\007" +
    "\003\010\052\011\050\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\021\023\036\065\037\007\040" +
    "\015\041\030\042\035\043\056\044\016\045\027\046\063" +
    "\047\062\050\067\051\043\052\066\053\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\205\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\002\210\004\060\007" +
    "\003\010\052\011\050\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\021\023\036\065\037\007\040" +
    "\015\041\030\042\035\043\056\044\016\045\027\046\063" +
    "\047\062\050\067\051\043\052\066\053\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\002\213\004\060" +
    "\007\003\010\052\011\050\012\047\013\045\014\044\015" +
    "\041\016\040\017\037\020\036\021\023\036\065\037\007" +
    "\040\015\041\030\042\035\043\056\044\016\045\027\046" +
    "\063\047\062\050\067\051\043\052\066\053\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\217\004\060\007\003\010\052\011\050\012\047" +
    "\013\045\014\044\015\041\016\040\017\037\020\036\021" +
    "\023\036\065\037\007\040\015\041\030\042\035\043\056" +
    "\044\016\045\027\046\063\047\062\050\067\051\043\052" +
    "\066\053\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\235\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\001\001\000\030\007\234\010" +
    "\052\011\050\012\047\013\045\014\044\015\041\016\040" +
    "\017\037\020\036\021\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\314\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\001\001\000\030\007\241\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\262\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\001\001\000\030\007\251\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\002\255\004\060\007" +
    "\003\010\052\011\050\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\021\023\036\065\037\007\040" +
    "\015\041\030\042\035\043\056\044\016\045\027\046\063" +
    "\047\062\050\067\051\043\052\066\053\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\002\267\004\060\007\003\010\052\011\050\012\047\013" +
    "\045\014\044\015\041\016\040\017\037\020\036\021\023" +
    "\036\065\037\007\040\015\041\030\042\035\043\056\044" +
    "\016\045\027\046\063\047\062\050\067\051\043\052\066" +
    "\053\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\002\276\004\060\007\003\010" +
    "\052\011\050\012\047\013\045\014\044\015\041\016\040" +
    "\017\037\020\036\021\023\036\065\037\007\040\015\041" +
    "\030\042\035\043\056\044\016\045\027\046\063\047\062" +
    "\050\067\051\043\052\066\053\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\307\004\060\007\003" +
    "\010\052\011\050\012\047\013\045\014\044\015\041\016" +
    "\040\017\037\020\036\021\023\036\065\037\007\040\015" +
    "\041\030\042\035\043\056\044\016\045\027\046\063\047" +
    "\062\050\067\051\043\052\066\053\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\340\012\047\013" +
    "\045\014\044\015\041\016\040\017\037\020\036\001\001" +
    "\000\022\011\337\012\047\013\045\014\044\015\041\016" +
    "\040\017\037\020\036\001\001\000\022\011\336\012\047" +
    "\013\045\014\044\015\041\016\040\017\037\020\036\001" +
    "\001\000\022\011\335\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\001\001\000\022\011\334\012" +
    "\047\013\045\014\044\015\041\016\040\017\037\020\036" +
    "\001\001\000\022\011\333\012\047\013\045\014\044\015" +
    "\041\016\040\017\037\020\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\357\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\001\001\000\014\014\356\015" +
    "\041\016\040\017\037\020\036\001\001\000\020\012\355" +
    "\013\045\014\044\015\041\016\040\017\037\020\036\001" +
    "\001\000\014\014\354\015\041\016\040\017\037\020\036" +
    "\001\001\000\014\014\353\015\041\016\040\017\037\020" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\144\032\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\002\365\004\060\007\003\010" +
    "\052\011\050\012\047\013\045\014\044\015\041\016\040" +
    "\017\037\020\036\021\023\036\065\037\007\040\015\041" +
    "\030\042\035\043\056\044\016\045\027\046\063\047\062" +
    "\050\067\051\043\052\066\053\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\372\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\144\032\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\002" +
    "\151\003\u0103\004\060\007\003\010\052\011\050\012\047" +
    "\013\045\014\044\015\041\016\040\017\037\020\036\021" +
    "\023\036\065\037\007\040\015\041\030\042\035\043\056" +
    "\044\016\045\027\046\063\047\062\050\067\051\043\052" +
    "\066\053\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\u0119\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\001\001" +
    "\000\030\007\u0107\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\002\u010a\004" +
    "\060\007\003\010\052\011\050\012\047\013\045\014\044" +
    "\015\041\016\040\017\037\020\036\021\023\036\065\037" +
    "\007\040\015\041\030\042\035\043\056\044\016\045\027" +
    "\046\063\047\062\050\067\051\043\052\066\053\010\001" +
    "\001\000\002\001\001\000\004\035\u010c\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\u010f\010\052\011" +
    "\050\012\047\013\045\014\044\015\041\016\040\017\037" +
    "\020\036\021\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\002\u0112\004\060\007\003\010\052\011\050" +
    "\012\047\013\045\014\044\015\041\016\040\017\037\020" +
    "\036\021\023\036\065\037\007\040\015\041\030\042\035" +
    "\043\056\044\016\045\027\046\063\047\062\050\067\051" +
    "\043\052\066\053\010\001\001\000\002\001\001\000\004" +
    "\035\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\u0117\004\060\007\003\010\052\011\050\012\047" +
    "\013\045\014\044\015\041\016\040\017\037\020\036\021" +
    "\023\036\065\037\007\040\015\041\030\042\035\043\056" +
    "\044\016\045\027\046\063\047\062\050\067\051\043\052" +
    "\066\053\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\u011d\004\060\007\003\010\052\011\050\012\047" +
    "\013\045\014\044\015\041\016\040\017\037\020\036\021" +
    "\023\036\065\037\007\040\015\041\030\042\035\043\056" +
    "\044\016\045\027\046\063\047\062\050\067\051\043\052" +
    "\066\053\010\001\001\000\002\001\001\000\004\035\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\002" +
    "\u0122\004\060\007\003\010\052\011\050\012\047\013\045" +
    "\014\044\015\041\016\040\017\037\020\036\021\023\036" +
    "\065\037\007\040\015\041\030\042\035\043\056\044\016" +
    "\045\027\046\063\047\062\050\067\051\043\052\066\053" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\002\u0125\004\060\007\003\010\052\011\050\012\047\013" +
    "\045\014\044\015\041\016\040\017\037\020\036\021\023" +
    "\036\065\037\007\040\015\041\030\042\035\043\056\044" +
    "\016\045\027\046\063\047\062\050\067\051\043\052\066" +
    "\053\010\001\001\000\002\001\001\000\004\035\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\002\u012a" +
    "\004\060\007\003\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\036\065" +
    "\037\007\040\015\041\030\042\035\043\056\044\016\045" +
    "\027\046\063\047\062\050\067\051\043\052\066\053\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u013a\052\u013b\001\001\000\002\001\001\000\030\007\u0151" +
    "\010\052\011\050\012\047\013\045\014\044\015\041\016" +
    "\040\017\037\020\036\021\023\001\001\000\030\007\u0149" +
    "\010\052\011\050\012\047\013\045\014\044\015\041\016" +
    "\040\017\037\020\036\021\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\002\u0143\004\060\007\003\010\052" +
    "\011\050\012\047\013\045\014\044\015\041\016\040\017" +
    "\037\020\036\021\023\036\065\037\007\040\015\041\030" +
    "\042\035\043\056\044\016\045\027\046\063\047\062\050" +
    "\067\051\043\052\066\053\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\002\u0147\004" +
    "\060\007\003\010\052\011\050\012\047\013\045\014\044" +
    "\015\041\016\040\017\037\020\036\021\023\036\065\037" +
    "\007\040\015\041\030\042\035\043\056\044\016\045\027" +
    "\046\063\047\062\050\067\051\043\052\066\053\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\003\010\052\011\050\012\047\013\045\014" +
    "\044\015\041\016\040\017\037\020\036\021\023\040\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\002" +
    "\u014e\004\060\007\003\010\052\011\050\012\047\013\045" +
    "\014\044\015\041\016\040\017\037\020\036\021\023\036" +
    "\065\037\007\040\015\041\030\042\035\043\056\044\016" +
    "\045\027\046\063\047\062\050\067\051\043\052\066\053" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\003\010\052\011\050\012\047\013\045\014\044\015" +
    "\041\016\040\017\037\020\036\021\023\040\u015d\001\001" +
    "\000\002\001\001\000\032\007\003\010\052\011\050\012" +
    "\047\013\045\014\044\015\041\016\040\017\037\020\036" +
    "\021\023\040\u0154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\u0157\004\060\007\003" +
    "\010\052\011\050\012\047\013\045\014\044\015\041\016" +
    "\040\017\037\020\036\021\023\036\065\037\007\040\015" +
    "\041\030\042\035\043\056\044\016\045\027\046\063\047" +
    "\062\050\067\051\043\052\066\053\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\002" +
    "\u015b\004\060\007\003\010\052\011\050\012\047\013\045" +
    "\014\044\015\041\016\040\017\037\020\036\021\023\036" +
    "\065\037\007\040\015\041\030\042\035\043\056\044\016" +
    "\045\027\046\063\047\062\050\067\051\043\052\066\053" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\002\u0160\004\060\007" +
    "\003\010\052\011\050\012\047\013\045\014\044\015\041" +
    "\016\040\017\037\020\036\021\023\036\065\037\007\040" +
    "\015\041\030\042\035\043\056\044\016\045\027\046\063" +
    "\047\062\050\067\051\043\052\066\053\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\123\010\052\011\050\012\047\013" +
    "\045\014\044\015\041\016\040\017\037\020\036\021\023" +
    "\025\u0168\026\121\001\001\000\034\007\123\010\052\011" +
    "\050\012\047\013\045\014\044\015\041\016\040\017\037" +
    "\020\036\021\023\025\u0166\026\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\u016d\006" +
    "\115\007\112\010\052\011\050\012\047\013\045\014\044" +
    "\015\041\016\040\017\037\020\036\021\023\022\114\024" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {


   private AS as = new AS();

  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // A ::= B A 
            {
              A RESULT =null;
		Subprogramas progaux = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		A programa = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		programa.codigo(progaux); RESULT = programa; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("A",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= A EOF 
            {
              Object RESULT =null;
		A start_val = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= 
            {
              A RESULT =null;
		 RESULT = as.A(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("A",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= BucleFor 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaBucle = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaBucle; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= BucleWhile 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaBucle = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaBucle; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= DeclaracionVar 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaDec = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaDec; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= Asignacion PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaAsig = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = etiquetaAsig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= SwitchDef 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaSwitchDef = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaSwitchDef; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= Funcion 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaFuncion = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaFuncion; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B ::= DecTipo 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaDecTipo = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaDecTipo; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B ::= DecEnum 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaDecEnum = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaDecEnum; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // B ::= DecStruct 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaDecStruct = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaDecStruct; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // B ::= LlamadaFuncVoid 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaLlamadaFunc = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaLlamadaFunc; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // B ::= CondicionalIf 
            {
              Subprogramas RESULT =null;
		Subprogramas etiquetaCondicionalIf = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = etiquetaCondicionalIf; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("B",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BucleFor ::= FOR APERTPARENTESIS DeclaracionConVi Expresion1 PUNTOYCOMA Asignacion CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue forToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		Subprogramas decVI = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Subprogramas exprPaso = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.buclefor1(prog,decVI ,condicion, exprPaso , forToken.getFila(), forToken.getColumna());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleFor",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BucleFor ::= FOR APERTPARENTESIS NOMBREV IN NOMBREV CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue forToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue variable = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue conjunto = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.buclefor2(prog,as.nombre(variable.getLexema(),variable.getFila(), variable.getColumna()),as.nombre(conjunto.getLexema(),conjunto.getFila(),  conjunto.getColumna()) , forToken.getFila(), forToken.getColumna());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleFor",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BucleFor ::= FOR APERTPARENTESIS error Expresion1 PUNTOYCOMA Asignacion CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Subprogramas exprPaso = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error en la declaracion inicial de for\n");   RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleFor",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BucleFor ::= FOR APERTPARENTESIS DeclaracionConVi error Asignacion CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		Subprogramas exprPaso = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error en condiciones de for\n");   RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleFor",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BucleFor ::= FOR APERTPARENTESIS DeclaracionConVi Expresion1 PUNTOYCOMA error CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error en la 3 parte del for de for\n");   RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleFor",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BucleFor ::= FOR APERTPARENTESIS NOMBREV IN error CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error en  dec segunda for2  for2\n");   RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleFor",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BucleWhile ::= WHILE APERTPARENTESIS Expresion1 CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue whileToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.BucleWhile(prog,condicion, whileToken.getFila(), whileToken.getColumna());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleWhile",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BucleWhile ::= WHILE APERTPARENTESIS error CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error en la condición while\n");   RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleWhile",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BucleWhile ::= WHILE APERTPARENTESIS Expresion1 APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, no se cierra parentesis\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BucleWhile",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DeclaracionVar ::= DeclaracionConVi 
            {
              Subprogramas RESULT =null;
		Subprogramas resuldecConVi = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = resuldecConVi; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DeclaracionVar ::= DeclaracionSinVi 
            {
              Subprogramas RESULT =null;
		Subprogramas resuldecSinVi = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = resuldecSinVi; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclaracionSinVi ::= Type NOMBREV PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.decsinVi(type,as.nombre(nom.getLexema(),nom.getFila(),  nom.getColumna()),  nom.getFila(), nom.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DeclaracionSinVi",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclaracionConVi ::= Type NOMBREV IGUAL Expresion PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.decconVi(type,expr, as.nombre(nom.getLexema(),nom.getFila(),  nom.getColumna()),  nom.getFila(), nom.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DeclaracionConVi",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Asignacion ::= Expresion1 IGUAL Expresion 
            {
              Subprogramas RESULT =null;
		E resulvar = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue igualToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.Asignacion(resulvar,expr, igualToken.getFila(), igualToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asignacion ::= Expresion1 IGUAL error PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		E resulvar = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.err.println("Error en asignacion\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = as.decTipoBool(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = as.decTipoCHAR(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= INT 
            {
              Type RESULT =null;
		RESULT = as.decTipoINT(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = as.decTipoDOUBLE(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= STRING 
            {
              Type RESULT =null;
		RESULT = as.decTipoString(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= Type MUL 
            {
              Type RESULT =null;
		Type typetoken = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue mulToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.decTipoPuntero(typetoken, mulToken.getFila(), mulToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= VECTOR MENOR Type MAYOR 
            {
              Type RESULT =null;
		TokenValue tokenVect = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Type typetoken = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.decTipoVector(typetoken, tokenVect.getFila(), tokenVect.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= VECTOR error MAYOR 
            {
              Type RESULT =null;
		 System.err.println("Error en el tipo del vector\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= NOMBRET 
            {
              Type RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.TipoUsuario(nom.getLexema(), nom.getFila(), nom.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Type",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LlamadaFuncReturn ::= NOMBREV APERTPARENTESIS Argumentos CIERREPARENTESIS 
            {
              E RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.LlamadaFuncReturn(list, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), nom.getFila(), nom.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LlamadaFuncReturn",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LlamadaFuncReturn ::= NOMBREV APERTPARENTESIS Argumentos error 
            {
              E RESULT =null;
		 System.err.println("Error, falta cerrar parentesis\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LlamadaFuncReturn",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LlamadaFuncVoid ::= NOMBREV APERTPARENTESIS Argumentos CIERREPARENTESIS PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		RESULT = as.LlamadaFuncVoid(list, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), nom.getFila(), nom.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LlamadaFuncVoid",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LlamadaFuncVoid ::= NOMBREV error Argumentos CIERREPARENTESIS 
            {
              Subprogramas RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta parentesis tras el nombre de la funcion\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LlamadaFuncVoid",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LlamadaFuncVoid ::= NOMBREV APERTPARENTESIS Argumentos error 
            {
              Subprogramas RESULT =null;
		 System.err.println("Error, falta cerrar parentesis\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LlamadaFuncVoid",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Argumentos ::= ListaArgumentos 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumentos",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Argumentos ::= 
            {
              ArrayList<E> RESULT =null;
		RESULT = new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumentos",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListaArgumentos ::= Expresion1 COMA ListaArgumentos 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(expr); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListaArgumentos ::= Expresion1 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<E> resul = new ArrayList<E>();resul.add(expr); RESULT = resul; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Funcion ::= Type NOMBREV APERTPARENTESIS ListaDecArg CIERREPARENTESIS APERTLLAVES FuncionConRetorno CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		Type tipoRetorno = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue parenToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		retornoFuncion cuerpo = (retornoFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.decFuncionConReturn(as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), list ,cuerpo, nom.getFila(), nom.getColumna(), tipoRetorno ); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Funcion ::= error NOMBREV APERTPARENTESIS ListaDecArg CIERREPARENTESIS APERTLLAVES FuncionConRetorno CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue parenToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		retornoFuncion cuerpo = (retornoFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error en declaracion de la funcion con retorno\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Funcion ::= Type NOMBREV error ListaDecArg CIERREPARENTESIS APERTLLAVES FuncionConRetorno CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		retornoFuncion cuerpo = (retornoFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta parentesis \n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Funcion ::= Type NOMBREV APERTPARENTESIS ListaDecArg error APERTLLAVES FuncionConRetorno CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		retornoFuncion cuerpo = (retornoFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta parentesis\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Funcion ::= VOID NOMBREV APERTPARENTESIS ListaDecArg CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue parenToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A cuerpo = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.decFuncionSinReturn(as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), list ,cuerpo, nom.getFila(), nom.getColumna() ); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FuncionConRetorno ::= A RETURN Expresion1 PUNTOYCOMA 
            {
              retornoFuncion RESULT =null;
		A cuerpo = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue returnToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.retornoFuncion(cuerpo, expr , returnToken.getFila(), returnToken.getColumna() ); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FuncionConRetorno",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListaDecArg ::= Type NOMBREV ListaDecArgAux 
            {
              ArrayList<ParametroFuncion> RESULT =null;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(as.ParametroFuncion(false, tipo, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), nom.getFila(), nom.getColumna() )); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDecArg",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListaDecArg ::= Type PORREFERENCIA NOMBREV ListaDecArgAux 
            {
              ArrayList<ParametroFuncion> RESULT =null;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(as.ParametroFuncion(true, tipo, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), nom.getFila(), nom.getColumna() )); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDecArg",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListaDecArgAux ::= 
            {
              ArrayList<ParametroFuncion> RESULT =null;
		 RESULT = new ArrayList<ParametroFuncion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDecArgAux",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListaDecArgAux ::= COMA Type NOMBREV ListaDecArgAux 
            {
              ArrayList<ParametroFuncion> RESULT =null;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(as.ParametroFuncion(false, tipo, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), nom.getFila(), nom.getColumna() )); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDecArgAux",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListaDecArgAux ::= COMA Type PORREFERENCIA NOMBREV ListaDecArgAux 
            {
              ArrayList<ParametroFuncion> RESULT =null;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<ParametroFuncion> list = (ArrayList<ParametroFuncion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(as.ParametroFuncion(true, tipo, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), nom.getFila(), nom.getColumna() )); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDecArgAux",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DecEnum ::= ENUM NOMBREV IGUAL APERTLLAVES ListaEnum CIERRELLAVES PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		TokenValue enumToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = as.decEnum( as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()),  enumToken.getFila(), enumToken.getColumna(), list); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecEnum",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListaEnum ::= NOMBREV COMA ListaEnum 
            {
              ArrayList<E> RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna())); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaEnum",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListaEnum ::= NOMBREV 
            {
              ArrayList<E> RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<E> resul = new ArrayList<E>(); 
		resul.add(as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()));
		RESULT = resul; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaEnum",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DecStruct ::= STRUCT NOMBRET APERTLLAVES ListaStruct CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue structToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<Subprogramas> list = (ArrayList<Subprogramas>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.decStruct(  list,as.TipoUsuario(nom.getLexema(), nom.getFila(), nom.getColumna()), structToken.getFila(), structToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecStruct",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DecStruct ::= STRUCT error 
            {
              Subprogramas RESULT =null;
		 System.err.println("Error en el nombre del struct struct\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecStruct",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DecStruct ::= STRUCT NOMBREV error 
            {
              Subprogramas RESULT =null;
		 System.err.println("Error dentro del structToken\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecStruct",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListaStruct ::= DeclaracionVar ListaStruct 
            {
              ArrayList<Subprogramas> RESULT =null;
		Subprogramas var = (Subprogramas)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<Subprogramas> list = (ArrayList<Subprogramas>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 list.add(var); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaStruct",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListaStruct ::= 
            {
              ArrayList<Subprogramas> RESULT =null;
		 RESULT = new ArrayList<Subprogramas>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaStruct",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DecTipo ::= TYPEDEF Type NOMBRET PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		TokenValue typedetoken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.decTipoUsuario(as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()),type, typedetoken.getFila(), typedetoken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecTipo",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DecTipo ::= TYPEDEF error NOMBRET PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		 System.err.println("Error dentro del typedef el tipo no existe\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecTipo",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DecTipo ::= TYPEDEF Type error PUNTOYCOMA 
            {
              Subprogramas RESULT =null;
		 System.err.println("Error dentro del typedef en el nuevo nombre del tipo typedef\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecTipo",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SwitchDef ::= SWITCH APERTPARENTESIS Expresion1 CIERREPARENTESIS APERTLLAVES ListaSwitch CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue switchToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<ElementosCase> list = (ArrayList<ElementosCase>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.Switch(expr, list, switchToken.getFila(), switchToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SwitchDef",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SwitchDef ::= SWITCH error Expresion1 CIERREPARENTESIS APERTLLAVES ListaSwitch CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<ElementosCase> list = (ArrayList<ElementosCase>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta parentesis en el switch\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SwitchDef",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SwitchDef ::= SWITCH APERTPARENTESIS Expresion1 error APERTLLAVES ListaSwitch CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		ArrayList<ElementosCase> list = (ArrayList<ElementosCase>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta cerrar parentesis en el switch\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SwitchDef",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListaSwitch ::= CASE APERTPARENTESIS Expresion1 CIERREPARENTESIS DOSPUNTOS APERTLLAVES A BREAK PUNTOYCOMA CIERRELLAVES ListaSwitch 
            {
              ArrayList<ElementosCase> RESULT =null;
		TokenValue tokenCase = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-10)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<ElementosCase> list = (ArrayList<ElementosCase>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		list.add(as.ElementosCase(prog,expr, tokenCase.getFila(), tokenCase.getColumna()));
        RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListaSwitch ::= CASE error Expresion1 CIERREPARENTESIS DOSPUNTOS APERTLLAVES A BREAK PUNTOYCOMA CIERRELLAVES ListaSwitch 
            {
              ArrayList<ElementosCase> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<ElementosCase> list = (ArrayList<ElementosCase>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.err.println("Error, falta parentesis en el case\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListaSwitch ::= CASE APERTPARENTESIS Expresion1 error DOSPUNTOS APERTLLAVES A BREAK PUNTOYCOMA CIERRELLAVES ListaSwitch 
            {
              ArrayList<ElementosCase> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<ElementosCase> list = (ArrayList<ElementosCase>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.err.println("Error, falta cerrar parentesis en el case\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListaSwitch ::= DEFAULT DOSPUNTOS APERTLLAVES A BREAK PUNTOYCOMA CIERRELLAVES 
            {
              ArrayList<ElementosCase> RESULT =null;
		TokenValue defaulttoken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 ArrayList<ElementosCase> list = new ArrayList<ElementosCase>();
	 	list.add(as.ElementosCase(prog, as.nombre("default",  defaulttoken.getFila(), defaulttoken.getColumna()), defaulttoken.getFila(), defaulttoken.getColumna()));
	 	RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListaSwitch ::= DEFAULT error PUNTOYCOMA 
            {
              ArrayList<ElementosCase> RESULT =null;
		 System.err.println("Error en default\n"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaSwitch",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondicionalIf ::= IF APERTPARENTESIS Expresion1 CIERREPARENTESIS APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue IfToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.ifSinElse(prog, cond, IfToken.getFila(), IfToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CondicionalIf",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CondicionalIf ::= IF APERTPARENTESIS Expresion1 CIERREPARENTESIS APERTLLAVES A CIERRELLAVES ListaElseIf ELSE APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		TokenValue ifToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-11)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		A prog1 = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<ElseIf> list = (ArrayList<ElseIf>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog2 = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.ifConElse(prog1,prog2, list,  cond, ifToken.getFila(), ifToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CondicionalIf",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CondicionalIf ::= IF error Expresion1 CIERREPARENTESIS APERTLLAVES A CIERRELLAVES ListaElseIf ELSE APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		A prog1 = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<ElseIf> list = (ArrayList<ElseIf>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog2 = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta parentesis en if\n");  RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CondicionalIf",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CondicionalIf ::= IF APERTPARENTESIS Expresion1 CIERREPARENTESIS error APERTLLAVES A CIERRELLAVES ListaElseIf ELSE APERTLLAVES A CIERRELLAVES 
            {
              Subprogramas RESULT =null;
		A prog1 = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<ElseIf> list = (ArrayList<ElseIf>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		A prog2 = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.err.println("Error, falta cerrar parentesis en if\n");  RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CondicionalIf",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListaElseIf ::= ELSEIF APERTPARENTESIS Expresion1 CIERREPARENTESIS APERTLLAVES A CIERRELLAVES ListaElseIf 
            {
              ArrayList<ElseIf> RESULT =null;
		TokenValue elseifToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		A prog = (A)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<ElseIf> list = (ArrayList<ElseIf>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		list.add(as.ElseIf(expr, prog, elseifToken.getFila(), elseifToken.getColumna()));
       RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaElseIf",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListaElseIf ::= 
            {
              ArrayList<ElseIf> RESULT =null;
		 RESULT = new ArrayList<ElseIf>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaElseIf",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresion ::= Expresion1 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion ::= ExpresionNew 
            {
              E RESULT =null;
		E newToken = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= newToken; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= CreacionVector 
            {
              E RESULT =null;
		E vectorToken = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= vectorToken; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expresion ::= CreacionPuntero 
            {
              E RESULT =null;
		E punteroToken = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = punteroToken; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expresion1 ::= LlamadaFuncReturn 
            {
              E RESULT =null;
		E fun = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= fun; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion1",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expresion1 ::= Expresionaux1 OR Expresion1 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue orToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.or(expr1, expr2, orToken.getFila(), orToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion1",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expresion1 ::= Expresionaux1 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = expr1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresion1",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expresionaux1 ::= Expresionaux1 AND Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue andToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.And(expr1, expr2, andToken.getFila(), andToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expresionaux1 ::= Expresionaux2 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expresionaux2 ::= Expresionaux3 IGUALIGUAL Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue igualToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.igualIgual(expr1, expr2, igualToken.getFila(), igualToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expresionaux2 ::= Expresionaux3 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expresionaux2 ::= Expresionaux3 MAYOR Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue mayorToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.mayor(expr1, expr2, mayorToken.getFila(), mayorToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expresionaux2 ::= Expresionaux3 MENOR Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue menorToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.menor(expr1, expr2, menorToken.getFila(), menorToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expresionaux2 ::= Expresionaux3 MAYORIGUAL Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue mayorToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.mayorigual(expr1, expr2, mayorToken.getFila(), mayorToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expresionaux2 ::= Expresionaux3 DISTINTO Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue distintoToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.Distinto(expr1, expr2, distintoToken.getFila(), distintoToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expresionaux2 ::= Expresionaux3 MENORIGUAL Expresionaux2 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue menorToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.menorIgual(expr1, expr2, menorToken.getFila(), menorToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux2",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expresionaux3 ::= Expresionaux4 SUMA Expresionaux3 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue sumToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.Suma(expr1, expr2, sumToken.getFila(), sumToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expresionaux3 ::= Expresionaux4 RESTA Expresionaux3 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue resta = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.resta(expr1, expr2, resta.getFila(), resta.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expresionaux3 ::= Expresionaux4 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux3",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expresionaux4 ::= Expresionaux4 DIV Expresionaux5 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue divToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.Div(expr1, expr2, divToken.getFila(), divToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expresionaux4 ::= Expresionaux4 MODULO Expresionaux5 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue modToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.mod(expr1, expr2, modToken.getFila(), modToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expresionaux4 ::= Expresionaux4 MUL Expresionaux5 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue mulToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.mul(expr1, expr2, mulToken.getFila(), mulToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expresionaux4 ::= Expresionaux5 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expresionaux5 ::= NOT Expresionaux5 
            {
              E RESULT =null;
		TokenValue notToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.not(expr, notToken.getFila(), notToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expresionaux5 ::= Expresionaux6 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux5",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expresionaux6 ::= Expresionaux6 ABRECORCHETE Expresion1 CIERRACORCHETE 
            {
              E RESULT =null;
		E expr1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue corcheteToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.corchetesVector(expr1, expr2, corcheteToken.getFila(), corcheteToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux6",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expresionaux6 ::= Expresionaux6 PUNTO NOMBREV 
            {
              E RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue puntoToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.accesoStruct(as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()),exp, puntoToken.getFila(), puntoToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux6",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expresionaux6 ::= Expresionaux6 FLECHA NOMBREV 
            {
              E RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue flechaToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.accesoStructPuntero(exp, as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()), flechaToken.getFila(), flechaToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux6",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expresionaux6 ::= Expresionaux7 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux6",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expresionaux7 ::= SUMA Expresionaux8 
            {
              E RESULT =null;
		TokenValue sumaToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.opSuma(expr, sumaToken.getFila(), sumaToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux7",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expresionaux7 ::= RESTA Expresionaux8 
            {
              E RESULT =null;
		TokenValue restaToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.opResta(expr, restaToken.getFila(), restaToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux7",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expresionaux7 ::= Expresionaux8 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux7",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expresionaux8 ::= NOMBREV 
            {
              E RESULT =null;
		TokenValue nom = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.nombre(nom.getLexema(), nom.getFila(), nom.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux8",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expresionaux8 ::= APERTPARENTESIS Expresion CIERREPARENTESIS 
            {
              E RESULT =null;
		TokenValue parToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.entreparentesis(expr, parToken.getFila(), parToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux8",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expresionaux8 ::= Expresionaux9 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux8",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expresionaux9 ::= ENT 
            {
              E RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.entero(ent.getLexema(), ent.getFila(), ent.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux9",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expresionaux9 ::= DECIMAL 
            {
              E RESULT =null;
		TokenValue dec = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.decimal(dec.getLexema(), dec.getFila(), dec.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux9",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expresionaux9 ::= CARACTER 
            {
              E RESULT =null;
		TokenValue car = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.caract(car.getLexema(), car.getFila(), car.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux9",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expresionaux9 ::= TRUE 
            {
              E RESULT =null;
		TokenValue tru = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.True(tru.getFila(), tru.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux9",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expresionaux9 ::= FALSE 
            {
              E RESULT =null;
		TokenValue fals = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.False(fals.getFila(), fals.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Expresionaux9",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionNew ::= NEW Type 
            {
              E RESULT =null;
		TokenValue newToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.exprNew(false, type, newToken.getFila(), newToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ExpresionNew",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionNew ::= NULL 
            {
              E RESULT =null;
		TokenValue newToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= as.exprNew(true,null, newToken.getFila(), newToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ExpresionNew",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CreacionVector ::= APERTPARENTESIS Expresion1 COMA Expresion1 CIERREPARENTESIS 
            {
              E RESULT =null;
		TokenValue token = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E tam = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E inicializado = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.creacionVector(tam,inicializado,token.getFila(),token.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CreacionVector",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CreacionVector2 ::= ABRECORCHETE Vector CIERRACORCHETE 
            {
              E RESULT =null;
		TokenValue corToken = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<E> vec = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.creacionVector2(vec, corToken.getFila(),corToken.getColumna()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CreacionVector2",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Vector ::= Expresionaux9 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		ArrayList<E> list = new ArrayList<E>(); list.add(expr); RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Vector",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Vector ::= Expresionaux9 COMA Vector 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<E> vec = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 vec.add(expr); RESULT = vec; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Vector",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CreacionPuntero ::= PORREFERENCIA Expresion1 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CreacionPuntero",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

